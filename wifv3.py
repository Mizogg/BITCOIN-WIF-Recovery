import itertools, random
from bit import *
from bit.format import bytes_to_wif
import hashlib
import base58
import binascii

alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

startsingle= str(input('Enter Your WIF HERE 5 or Capital L or Capital K : '))
filename ='btc.txt'
with open(filename) as f:
    line_count = 0
    for line in f:
        line != "\n"
        line_count += 1
with open(filename) as file:
    add = file.read().split()
add = set(add)
print('Total Bitcoin Addresses Loaded and Checking for Recovery : ',str (line_count))
total=0
while True:
    total+=1
    if startsingle[0] == '5':
        c1 = str(startsingle)
        c2 = str ('H') #(random.choice(alphabet))
        c3 = str ('p') #(random.choice(alphabet))
        c4 = str (random.choice(alphabet))
        c5 = str (random.choice(alphabet))
        c6 = str (random.choice(alphabet))
        c7 = str (random.choice(alphabet))
        c8 = str (random.choice(alphabet))      
        c9 = str (random.choice(alphabet))
        c10 = str (random.choice(alphabet))
        c11 = str (random.choice(alphabet))
        c12 = str (random.choice(alphabet))
        c13 = str (random.choice(alphabet))
        c14 = str (random.choice(alphabet))
        c15 = str (random.choice(alphabet))
        c16 = str (random.choice(alphabet))
        c17 = str (random.choice(alphabet))
        c18 = str (random.choice(alphabet))
        c19 = str (random.choice(alphabet))
        c20 = str (random.choice(alphabet))
        c21 = str (random.choice(alphabet))
        c22 = str (random.choice(alphabet))
        c23 = str (random.choice(alphabet))
        c24 = str (random.choice(alphabet))
        c25 = str (random.choice(alphabet))
        c26 = str (random.choice(alphabet))
        c27 = str (random.choice(alphabet))
        c28 = str (random.choice(alphabet))
        c29 = str (random.choice(alphabet))
        c30 = str (random.choice(alphabet))
        c31 = str (random.choice(alphabet))
        c32 = str (random.choice(alphabet))
        c33 = str (random.choice(alphabet))
        c34 = str (random.choice(alphabet))
        c35 = str (random.choice(alphabet))
        c36 = str (random.choice(alphabet))
        c37 = str (random.choice(alphabet))
        c38 = str (random.choice(alphabet))
        c39 = str (random.choice(alphabet))
        c40 = str (random.choice(alphabet))
        c41 = str (random.choice(alphabet))
        c42 = str (random.choice(alphabet))
        c43 = str (random.choice(alphabet))
        c44 = str (random.choice(alphabet))
        c45 = str (random.choice(alphabet))
        c46 = str (random.choice(alphabet))
        c47 = str (random.choice(alphabet))
        c48 = str (random.choice(alphabet))
        c49 = str (random.choice(alphabet))
        c50 = str (random.choice(alphabet))
        c51 = str (random.choice(alphabet))
        magic = (c1+c2+c3+c4+c5+c6+c7+c8+c9+c10+c11+c12+c13+c14+c15+c16+c17+c18+c19+c20+c21+c22+c23+c24+c25+c26+c27+c28+c29+c30+c31+c32+c33+c34+c35+c36+c37+c38+c39+c40+c41+c42+c43+c44+c45+c46+c47+c48+c49+c50+c51)
        first_encode = base58.b58decode(magic)
        private_key_full = binascii.hexlify(first_encode)
        private_key = private_key_full[2:-8]
    elif startsingle[0] in ['L', 'K']:
        c1 = str(startsingle)
        c2 = str (random.choice(alphabet))
        c3 = str (random.choice(alphabet))
        c4 = str (random.choice(alphabet))
        c5 = str (random.choice(alphabet))
        c6 = str (random.choice(alphabet))
        c7 = str (random.choice(alphabet))
        c8 = str (random.choice(alphabet))      
        c9 = str (random.choice(alphabet))
        c10 = str (random.choice(alphabet))
        c11 = str (random.choice(alphabet))
        c12 = str (random.choice(alphabet))
        c13 = str (random.choice(alphabet))
        c14 = str (random.choice(alphabet))
        c15 = str (random.choice(alphabet))
        c16 = str (random.choice(alphabet))
        c17 = str (random.choice(alphabet))
        c18 = str (random.choice(alphabet))
        c19 = str (random.choice(alphabet))
        c20 = str (random.choice(alphabet))
        c21 = str (random.choice(alphabet))
        c22 = str (random.choice(alphabet))
        c23 = str (random.choice(alphabet))
        c24 = str (random.choice(alphabet))
        c25 = str (random.choice(alphabet))
        c26 = str (random.choice(alphabet))
        c27 = str (random.choice(alphabet))
        c28 = str (random.choice(alphabet))
        c29 = str (random.choice(alphabet))
        c30 = str (random.choice(alphabet))
        c31 = str (random.choice(alphabet))
        c32 = str (random.choice(alphabet))
        c33 = str (random.choice(alphabet))
        c34 = str (random.choice(alphabet))
        c35 = str (random.choice(alphabet))
        c36 = str (random.choice(alphabet))
        c37 = str (random.choice(alphabet))
        c38 = str (random.choice(alphabet))
        c39 = str (random.choice(alphabet))
        c40 = str (random.choice(alphabet))
        c41 = str (random.choice(alphabet))
        c42 = str (random.choice(alphabet))
        c43 = str (random.choice(alphabet))
        c44 = str (random.choice(alphabet))
        c45 = str (random.choice(alphabet))
        c46 = str (random.choice(alphabet))
        c47 = str (random.choice(alphabet))
        c48 = str (random.choice(alphabet))
        c49 = str (random.choice(alphabet))
        c50 = str (random.choice(alphabet))
        c51 = str (random.choice(alphabet))
        c52 = str (random.choice(alphabet))
        magic = (c1+c2+c3+c4+c5+c6+c7+c8+c9+c10+c11+c12+c13+c14+c15+c16+c17+c18+c19+c20+c21+c22+c23+c24+c25+c26+c27+c28+c29+c30+c31+c32+c33+c34+c35+c36+c37+c38+c39+c40+c41+c42+c43+c44+c45+c46+c47+c48+c49+c50+c51+c52)
        first_encode = base58.b58decode(magic)
        private_key_full = binascii.hexlify(first_encode)
        private_key = private_key_full[2:-10]
    key = Key.from_hex(str(private_key.decode('utf-8')))
    wifu = bytes_to_wif(key.to_bytes(), compressed=False)
    wifc = bytes_to_wif(key.to_bytes(), compressed=True)
    key1 = Key(wifu)
    caddr = key.address
    uaddr = key1.address
    print('Total Scanned = ', total, '  -=WIF Current Recovery Key = ', magic, end='\r')
    #print('\nPrivateKey= ', private_key.decode('utf-8'), '\nCompressed Address = ', caddr, '\nCompressed WIF = ', wifc, '\nUncompressed = ', uaddr, '\nUncompressed WIF = ', wifu)
    if caddr in add or uaddr in add:
        print('\n Congraz FOUND!!!', '\nPrivateKey= ', private_key.decode('utf-8'), '\nCompressed Address = ', caddr, '\nCompressed WIF = ', wifc, '\nUncompressed = ', uaddr, '\nUncompressed WIF = ', wifu)
        f=open('winner.txt','a')
        f.write('\n Congraz FOUND!!!' + '\nPrivateKey= ' + private_key.decode('utf-8') + '\nCompressed Address = ' + caddr + '\nCompressed WIF = ' + wifc + '\nUncompressed = ' + uaddr + '\nUncompressed WIF = ' + wifu)
        f.close()